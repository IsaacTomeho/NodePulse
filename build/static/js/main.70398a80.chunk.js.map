{"version":3,"sources":["dataParser.js","App.js","reportWebVitals.js","index.js"],"names":["csvPath","nodes","links","initData","d3","then","data","allNames","Set","map","d","Name","forEach","Connections","split","name","add","trim","Array","from","id","source","target","push","Graph","svgRef","useRef","_useState","useState","_useState2","_slicedToArray","setNodes","_useState3","_useState4","setLinks","useEffect","length","svg","current","selectAll","remove","simulation","force","strength","window","innerWidth","innerHeight","link","append","enter","attr","node","call","on","event","active","alphaTarget","restart","subject","fx","x","fy","y","React","createElement","ref","width","height","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.70398a80.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nconst csvPath = \"social_graph.csv\";  // TODO: Replace with the actual path\n\nlet nodes = [];\nlet links = [];\n\n// Function to initialize and parse the data\nfunction initData() {\n    return d3.csv(csvPath).then(data => {\n        // Extracting unique node names\n        let allNames = new Set(data.map(d => d.Name));\n        data.forEach(d => {\n            d.Connections.split(',').forEach(name => allNames.add(name.trim()));\n        });\n\n        // Creating the nodes list\n        nodes = Array.from(allNames).map(name => ({ id: name, name: name }));\n\n        // Creating the links list\n        data.forEach(d => {\n            const source = d.Name;\n            d.Connections.split(',').forEach(target => {\n                links.push({ source: source, target: target.trim() });\n            });\n        });\n    });\n}\n\nexport function getNodes() {\n    if (nodes.length === 0) {\n        initData();\n    }\n    return nodes;\n}\n\nexport function getLinks() {\n    if (links.length === 0) {\n        initData();\n    }\n    return links;\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { getNodes, getLinks } from './dataParser';\n\nfunction Graph() {\n  const svgRef = useRef(null);\n  const [nodes, setNodes] = useState([]);\n  const [links, setLinks] = useState([]);\n\n  useEffect(() => {\n    // Retrieve the parsed data using the provided functions\n    setNodes(getNodes());\n    setLinks(getLinks());\n  }, []);\n\n  useEffect(() => {\n    if (nodes.length === 0 || links.length === 0) return;\n\n    const svg = d3.select(svgRef.current);\n\n    // Clear the SVG for re-rendering\n    svg.selectAll('*').remove();\n\n    // Create the force simulation\n    const simulation = d3.forceSimulation(nodes)\n      .force('link', d3.forceLink(links).id(d => d.id))\n      .force('charge', d3.forceManyBody().strength(-400))\n      .force('center', d3.forceCenter(window.innerWidth / 2, window.innerHeight / 2));\n\n    // Create links (edges)\n    const link = svg.append('g')\n      .selectAll('line')\n      .data(links)\n      .enter()\n      .append('line')\n      .attr('stroke', '#000')\n      .attr('stroke-width', 1);\n\n    // Create nodes\n    const node = svg.append('g')\n      .selectAll('circle')\n      .data(nodes)\n      .enter()\n      .append('circle')\n      .attr('r', 5)\n      .attr('fill', '#69b3a2')\n      .call(d3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended));\n\n    // Update the positions of the nodes and links on each \"tick\" of the simulation\n    simulation.on('tick', () => {\n      link.attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n\n      node.attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n    });\n\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n\n  }, [nodes, links]);\n\n  return (\n    <svg ref={svgRef} width={window.innerWidth} height={window.innerHeight}></svg>\n  );\n}\n\nexport default function App() {\n  return <Graph />;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}